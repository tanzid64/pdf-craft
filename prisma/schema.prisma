generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  password  String?

  File      File[]
  Message   Message[]

  stripeCustomerId       String?   @unique @map("stripe_customer_id")
  stripeSubscriptionId   String?   @unique @map("stripe_subscription_id")
  stripePriceId          String?   @map("stripe_price_id")
  stripeCurrentPeriodEnd DateTime? @map("stripe_current_period_end")
}

enum UploadStatus {
  PENDING
  PROCESSING
  FAILED
  SUCCESS
}

model File {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String

  uploadStatus UploadStatus @default(PENDING)

  url          String
  key          String // to identify particular file from bucket
  messages     Message[]

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?      @db.Uuid
}

model Message {
  id           String       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  text         String       @db.Text()

  isUserMessage Boolean

  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  User         User?        @relation(fields: [userId], references: [id])
  userId       String?      @db.Uuid
  File         File?        @relation(fields: [fileId], references: [id])
  fileId       String?      @db.Uuid
}
